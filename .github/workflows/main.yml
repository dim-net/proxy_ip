name: Update Proxy List

on:
  schedule:
    - cron: '0 * * * *'
  workflow_dispatch:

jobs:
  update-proxy:
    runs-on: ubuntu-latest
    permissions:
      contents: write

    steps:
    - name: Checkout repository
      uses: actions/checkout@v4

    - name: Set up Node.js
      uses: actions/setup-node@v4
      with:
        node-version: '18'

    - name: Install Node.js dependencies
      run: npm install node-fetch # Baris ini ditambahkan untuk menginstal node-fetch

    - name: Run proxy health check and save to file
      id: run-script
      run: |
        node -e '
          const net = require("net");
          const fs = require("fs"); 
          const path = require("path"); 

          const PROXY_LIST_URLS = [
              "https://raw.githubusercontent.com/gopaybis/Proxylist/refs/heads/main/totalproxylist2.txt",
              "https://raw.githubusercontent.com/h58fmb0344g9h3/p57gdv3j3n0vg334/refs/heads/main/f74bjd2h2ko99f3j5"
          ];
          const HEALTH_CHECK_TIMEOUT = 5000;

          async function checkProxyHealth(proxy) {
              const { ip, port } = proxy;
              return new Promise((resolve) => {
                  const startTime = Date.now();
                  let socket;

                  socket = net.connect({ host: ip, port: parseInt(port) }, () => {
                      const latency = Date.now() - startTime;
                      socket.destroy();
                      resolve({ ...proxy, active: true, latency: latency });
                  });

                  socket.setTimeout(HEALTH_CHECK_TIMEOUT);
                  
                  socket.on("timeout", () => {
                      socket.destroy();
                      resolve({ ...proxy, active: false, latency: -1, error: "Timeout" });
                  });

                  socket.on("error", (err) => {
                      socket.destroy();
                      resolve({ ...proxy, active: false, latency: -1, error: err.message });
                  });
              });
          }

          async function main() {
              const fetchModule = await import("node-fetch");
              const fetch = fetchModule.default; 

              console.log(`Fetching proxy lists from ${PROXY_LIST_URLS.length} sources...`);
              const fetchPromises = PROXY_LIST_URLS.map(url => fetch(url).then(res => {
                  if (!res.ok) {
                      throw new Error(`Failed to fetch from ${url}: ${res.status} ${res.statusText}`);
                  }
                  return res.text();
              }));
              
              const proxyStrings = await Promise.all(fetchPromises);
              console.log("All proxy lists fetched successfully.");

              const combinedString = proxyStrings.join("\\n");
              const allLines = combinedString.split("\\n").filter(Boolean);
              const uniqueLines = [...new Set(allLines)];

              console.log(`Found ${allLines.length} total proxies, with ${uniqueLines.length} unique proxies after de-duplication.`);

              const rawProxies = uniqueLines.map((entry) => {
                      const [ip, port, country, org] = entry.split(",");
                      return { ip: ip || "Unknown", port: port || "Unknown", country: country ? country.toUpperCase() : "Unknown", org: org || "Unknown Org" };
                  });

              console.log(`Starting health check for ${rawProxies.length} unique proxies...`);
              const healthCheckPromises = rawProxies.map(proxy => checkProxyHealth(proxy));
              const checkedProxies = await Promise.all(healthCheckPromises);
              
              const activeProxies = checkedProxies.filter(p => p.active);
              console.log(`Health check complete. ${activeProxies.length} active proxies found.`);

              const outputPath = path.join(process.env.GITHUB_WORKSPACE, "proxy.txt");
              const proxyContent = activeProxies.map(p => `${p.ip}:${p.port}`).join("\\n");
              fs.writeFileSync(outputPath, proxyContent);
              console.log(`Successfully wrote ${activeProxies.length} active proxies to proxy.txt`);
          }

          main().catch(error => {
              console.error("Error during proxy update process:", error);
              process.exit(1);
          });
        '
      env:
        GITHUB_WORKSPACE: ${{ github.workspace }}

    - name: Commit and push if changes
      run: |
        git config user.name "github-actions[bot]"
        git config user.email "github-actions[bot]@users.noreply.github.com"
        git add proxy.txt
        git commit -m "Update active proxy list" || echo "No changes to commit"
        git push
