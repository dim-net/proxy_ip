name: Update and Test Proxies

on:
  workflow_dispatch: # Allows manual execution
  schedule:
    - cron: '0 */6 * * *' # Run every 6 hours

jobs:
  update-proxies:
    runs-on: ubuntu-latest
    timeout-minutes: 15 # Set a timeout for the entire job to prevent infinite runs

    steps:
      - name: Checkout repository
        uses: actions/checkout@v4

      - name: Define proxy sources
        id: proxy_sources
        run: |
          # Define your proxy list URLs here, separated by spaces
          # Example: URL1 URL2 URL3
          echo "PROXY_URLS=https://raw.githubusercontent.com/gopaybis/Proxylist/refs/heads/main/totalproxylist2.txt https://raw.githubusercontent.com/h58fmb0344g9h3/p57gdv3j3n0vg334/refs/heads/main/f74bjd2h2ko99f3j5" >> "$GITHUB_ENV"

      - name: Fetch and combine proxies
        run: |
          TEMP_FILE="all_proxies_raw.txt"
          :> "$TEMP_FILE" # Create an empty file

          for url in ${{ env.PROXY_URLS }}; do
            echo "Fetching from: $url"
            curl -s "$url" >> "$TEMP_FILE"
            echo "" >> "$TEMP_FILE" # Add a newline for separation
          done

          # Remove empty lines and trim whitespace
          sed -i '/^$/d' "$TEMP_FILE"
          sed -i 's/^[[:space:]]*//;s/[[:space:]]*$//' "$TEMP_FILE"

          # Extract only IP:Port, remove duplicates, and save to a new file for ping action
          # We'll use awk to reformat the lines to "ip:port" as required by the ping action
          # and then sort -u to get unique ip:port combinations
          awk -F',' '{print $1":"$2}' "$TEMP_FILE" | sort -u > "proxies_for_ping.txt"

          echo "Combined unique IP:Port for ping test:"
          cat "proxies_for_ping.txt"
          echo "Total unique IP:Port entries: $(wc -l < proxies_for_ping.txt)"

      - name: Test proxy connections (TCP Ping)
        id: tcp_ping_test
        uses: superfly/fly-proxy-ping@v0.1.0
        with:
          file: proxies_for_ping.txt # Input file with IP:Port list
          timeout: 2s                 # 5-second timeout for each connection
          concurrency: 50             # Number of concurrent connections to test at once (adjust as needed)
          output: reachable_proxies.txt # Output file for reachable proxies

      - name: Filter original proxy data based on reachable IP:Port
        run: |
          ORIGINAL_PROXIES_FILE="all_proxies_raw.txt" # The file with full proxy data (IP,Port,Country,Org)
          REACHABLE_IPS_FILE="reachable_proxies.txt" # The output from the TCP ping action (IP:Port)
          FINAL_PROXY_FILE="proxy.txt" # Your desired final output file

          :> "$FINAL_PROXY_FILE" # Create an empty file

          # Create a temporary file with only the IP:Port from the original combined data
          awk -F',' '{print $1":"$2}' "$ORIGINAL_PROXIES_FILE" | sort -u > "original_ips_ports.txt"

          # Read reachable IP:Ports and store them in a temporary lookup file (using `grep -F -x -f` is efficient)
          # Or a more robust way to match:
          while IFS= read -r line; do
            # Find the original full line for each reachable IP:Port
            # This assumes that the 'reachable_proxies.txt' contains exact 'IP:Port' strings.
            grep "^$(echo "$line" | sed 's/\./\\./g;s/:/\\:/g')\," "$ORIGINAL_PROXIES_FILE" >> "$FINAL_PROXY_FILE"
          done < "$REACHABLE_IPS_FILE"

          # Remove any potential duplicates if grep found multiple lines for the same IP:Port
          sort -u "$FINAL_PROXY_FILE" -o "$FINAL_PROXY_FILE"


          echo "Final proxy.txt content (reachable proxies with full details):"
          cat "$FINAL_PROXY_FILE"
          echo "Total reachable proxies: $(wc -l < "$FINAL_PROXY_FILE")"

      - name: Commit and push if changes exist
        run: |
          git config user.name "github-actions[bot]"
          git config user.email "github-actions[bot]@users.noreply.github.com"
          git add proxy.txt
          git diff --quiet --cached || git commit -m "Update proxy list with reachable proxies via TCP ping"
          git push
        env:
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
